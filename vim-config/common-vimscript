
set number
set relativenumber
set hlsearch
set scrolloff=10
set showmatch
set history=50

set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab
set smartindent
set hidden " Allow to replace the current buffer in the window even if that buffer is modified.

set spelllang=en  " Set the spell checker language, editor wide
set nospell       " Disable spell checking by default

set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set wildmenu            " display completion matches in a status line
set matchpairs+=<:>     " When hovering over < or > can use % to jump between them like ()

" Set the colorscheme to monokai on editor startup. Remove the following line to return the colorscheme back to default
colorscheme monokai

" Set the screen line break display character
set showbreak=>\ 

" Setup help pages
au Filetype python set keywordprg=pydoc3
au Filetype c set keywordprg=bash
au Filetype cpp set keywordprg=man
"au Filetype cpp set keywordprg=cppman

" Vanilla vim remapping
noremap Y y$
map cc c^

" Change Backspace key to the Escape key (for all modes accept insert).
map <BS> <ESC>

" Open the file manager
nmap <SPACE>f :Explore<CR>
nmap <SPACE>F :Explore 

" Convert between hex representations
map <SPACE>x :%!xxd<CR>
map <SPACE>X :%!xxd -r<CR>

" Search for text within the last visually selected region.
"   uses /\%V ... \%V  to match only within the last visually selected text.
vmap <SPACE>vs <ESC>/\V\%V\<\>\%V/<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
vmap <SPACE>vS <ESC>/\V\%V\%V/<LEFT><LEFT><LEFT><LEFT>
nmap <SPACE>vs /\V\%V\<\>\%V/<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
nmap <SPACE>vS /\V\%V\%V/<LEFT><LEFT><LEFT><LEFT>
map <SPACE>vr <ESC>:%s/\V\%V\<\>\%V//<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
map <SPACE>vR <ESC>:%s/\V\%V\%V//<LEFT><LEFT><LEFT><LEFT><LEFT>

" Toggle the spell checker (enable and disable)
nnoremap <SPACE>es :set spell!<CR>:set spell?<CR>

" Language specific bindings
"   Python
au FileType python nmap <SPACE>r :!python3 %<CR>
"     Filter file through python interpreter
au FileType python nmap <SPACE>ff :%!python3<CR>
au FileType python nmap <SPACE>fl :.!python3<CR>
au FileType python nmap <SPACE>fc : !python3<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>


" Search for visually selected text
"vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
" Search for selected text, forwards or backwards.
"  To toggle literal spaces g:VeryLiteral use:  \vl (assumes \ is leader key (default))
vnoremap <silent> <SPACE>hs :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> <SPACE>hS :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>

function! WrapWith(startChar, endChar) range
    let l:beg = getpos("'<")
    let l:end = getpos("'>")
    execute "normal! `>a".a:endChar
    execute "normal! `<i".a:startChar
endfunction

" Wrappers
vnoremap <silent> <SPACE>( :call WrapWith("(", ")")<CR>
vnoremap <silent> <SPACE>[ :call WrapWith("[", "]")<CR>
vnoremap <silent> <SPACE>{ :call WrapWith("{", "}")<CR>
vnoremap <silent> <SPACE>< :call WrapWith("<", ">")<CR>
vnoremap <silent> <SPACE>" :call WrapWith("\"", "\"")<CR>
vnoremap <silent> <SPACE>' :call WrapWith("\'", "\'")<CR>

" Swap motions (Can comment out to allow individual files to specify this)
noremap j g<DOWN>
noremap k g<UP>
noremap gj <DOWN>
noremap gk <UP>

" Load some plugins
"  Enable the man page plugin
:runtime! ftplugin/man.vim
